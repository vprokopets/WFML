# Generated by Selenium IDE

from os.path import dirname, abspath
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver import FirefoxOptions


class TestBRISEUPD():
    def setup_method(self):
        opts = FirefoxOptions()
        opts.add_argument("--headless")
        self.driver = webdriver.Firefox(options=opts,
                                        executable_path=f'{dirname(dirname(abspath(__file__)))}/geckodriver')
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def test_bRISE(self):
        # Test name: BRISE
        # Step # | name | target | value
        # 1 | open | /wizard/test/ |
        self.driver.get("http://127.0.0.1:8000/wizard/test/")
        # 2 | setWindowSize | 1848x1053 |
        self.driver.set_window_size(1848, 1053)
        # 3 | click | id=id_model_field |
        self.driver.find_element(By.ID, "id_model_field").click()
        # 4 | type | id=id_model_field |
        self.driver.find_element(By.ID, "id_model_field").send_keys("""
General {
    NumberOfWorkers -> integer
    ResultStorage -> string
    [NumberOfWorkers >= 1]
}

SelectionAlgorithm {
    type -> string
    [type in {Sobol, MersenneTwister}]
}

DefaultConfigurationHandler {
    type -> string
    [type in {AutoModel, Random}]
}

DomainDescription {
    DataFile -> string
}


abstract OutliersDetector 5 {
    MinActiveNumberOfTasks -> integer
    MaxActiveNumberOfTasks -> integer
    [MinActiveNumberOfTasks >= 3]
    [MaxActiveNumberOfTasks >= 3]
    [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]
}

or OutliersDetection {
    Dixon : OutliersDetector
    Grubbs : OutliersDetector
    Chauvenet : OutliersDetector
    Quartiles : OutliersDetector
    Mad : OutliersDetector
}

abstract AbstrRepeater {
    MinTasksPerConfiguration -> integer
    MaxTasksPerConfiguration -> integer
    [MinTasksPerConfiguration <= MaxTasksPerConfiguration]
}

RepetitionManagement {
    DefaultConfiguration {
        TasksPerConfiguration -> integer
        [TasksPerConfiguration >= 10]
    }
    Repeaters{
        xor Repeater {
            QuantityBased : AbstrRepeater {
                [MinTasksPerConfiguration >= 1]
            }
            AcceptableErrorBased: AbstrRepeater {
                MinTasksPerBadConfiguration -> integer

                MaxFailedTasksPerConfiguration -> integer
                BaseAcceptableErrors -> integer
                ConfidenceLevels -> float
                DevicesScaleAccuracies -> integer
                DevicesAccuracyClasses -> integer
                [MinTasksPerConfiguration >= 2]
                [MinTasksPerBadConfiguration >= 1]
                ExperimentAwareness {
                    isEnabled -> boolean
                    MaxAcceptableErrors -> integer
                    RatiosMax -> integer
                }
            }
        }
    }
}

abstract Model {
    Type -> predefined
}

abstract TreeParzenEstimator: Model {
    Parameters {
        TopNPercent -> integer
        RandomFraction -> integer
        BandwidthFactor -> integer
        MinBandwirth -> float
        SamplingSize -> integer
    }
    [Type = 'brise.TreeParzenEstimator']
}

abstract MultiArmedBandit: Model {
    Parameters {
        cType -> string
        c -> float
        [cType in {int, float, std}]
        [if cType == float then 0 <= c]
        [if cType == float then c <= 1]
        [if cType == std then c = std]
    }
    [Type = 'brise.MultiArmedBandit']
}

abstract ModelMock

abstract SciKitLearn {
    Type -> string
    Parameters {
        SamplingSize -> integer
        MinimalScore -> float
        CrossValidationSplits -> integer
        TestSize -> float
        DataPreprocessing {
            OrdinalHyperparameter -> string
            NominalHyperparameter -> string
            IntegerHyperparameter -> string
            FloatHyperparameter -> string
        }
        UnderlyingModelParameters {
            n_iter -> integer
            tol -> float
            normalize -> boolean
        }
    }
}

Predictor {
    WindowSize -> float
    Models {
        xor Model {
            TPE : TreeParzenEstimator
            MAB : MultiArmedBandit
            MM : ModelMock
            skLearn : SciKitLearn
        }
    }
}

StopConditionTriggerLogic {
    Expression -> string
    InspectionParameters {
        RepetitionPeriod -> integer
        TimeUnit -> string
        [RepetitionPeriod > 0]
        [TimeUnit in {seconds, minutes, hours, days}]
    }
}

abstract SC {
    Name -> string
    Type -> predefined
}

StopCondition {
    QuantityBasedSC : SC + {
        Parameters {
            MaxConfigs -> integer
            [MaxConfigs > 0]
        }
        [Type = QuantityBased]
    }

    GuaranteedSC : SC 1 {
        [Type = Guaranted]
    }

    BadConfigurationBasedSC : SC + {
        Parameters {
            MaxBadConfigurations -> integer
            [MaxBadConfigurations > 0]
        }
        [Type = BadConfigurationBased]
    }

    ImprovementBasedSC : SC + {
        Parameters {
            MaxConfigsWithoutImprovement -> integer
            [MaxConfigsWithoutImprovement > 0]
        }
        [Type = ImprovementBased]
    }

    TimeBasedSC : SC + {
        Parameters {
            MaxRunTime -> integer
            TimeUnit -> string
            [MaxRunTime > 0]
            [TimeUnit in {seconds, minutes, hours, days}]
        }
        [Type = TimeBased]
    }
}


TransferLearning {
    isEnabled -> boolean
    TransferExpediencyDetermination {
        ComparatorType -> string
        MinNumberOfSamples -> integer
        xor NumberOfSimilarExperiments {
            Numeric {
                Value -> integer
            }
            Categorical {
                Value -> predefined
                [Value = 'use_clustering']
            }
        }
        ClusteringAlgorithm -> predefined
        [ClusteringAlgorithm = MeanShiftClustering]
    }
    MultiTaskLearning ? {
        Standard{
            Filters{
                FewShot -> boolean
            }
            OldNewConfigsRatio -> float
            TransferBestConfigsOnly -> boolean
            TransferFromMostSimilarExperimentsFirst -> boolean
            [OldNewConfigsRatio >= 0.1]
        }
    }
    ModelsRecommendation ? {
        DynamicModelsRecommendation {
            xor RecommendationGranularity {
                Finite {
                    Value -> integer
                    [Value >= 1]
                }
                Infinite {
                    Value -> predefined
                    [Value = 'inf']
                }
            }
            Filters {
                FewShot -> boolean
            }
            TimeToBuildModelThreshold -> float
            TimeUnit -> string
            ThresholdType -> string
            PerformanceMetric -> string
            [TimeUnit in {seconds, minutes, hours, days}]
            [ThresholdType in {hard, soft}]
            [PerformanceMetric in {AverageRelativeImprovement}]
        }
    }
}

abstract NominalHyperparameter {
    Type -> predefined
    [Type = NominalHyperparameter]
}

abstract MDNominalHyperparameter {
    Type -> predefined
    Model -> string
    [Type = NominalHyperparameter]
    // [Model in childs.Predictor.Models]
}

abstract OrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> string
    Model -> predefined
    [Type = OrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract IntegerOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> integer
    Model -> predefined
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract FloatOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> float
    Model -> predefined
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract FloatHyperparameter {
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> float
    Model -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
    // [Model in childs.Predictor.Models]
}

abstract IntegerHyperparameter {
    Name -> predefined
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> integer
    Model -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
    // [Model in childs.Predictor.Models]
}

Context {
    Experiment {
        TaskConfiguration {
            TaskName -> string
            xor Scenario {
                FromFile {
                    WsFile -> string
                    AdditionalParameter * {
                        Name -> string
                        Value -> string
                    }
                }
                FromDescription {
                    Problem -> string
                    InitializationParameters -> string
                    Budget {
                        Type -> string
                        Amount -> integer
                    }
                    Hyperparameters -> string
                }
            }
            Objectives{
                Objective + {
                    Name -> string
                    DataType -> string
                    Minimization -> boolean
                    Priority -> integer
                    ModelPriority -> integer
                    ExpectedValuesRange -> floatArray
                    MaxTimeToRunTask -> integer ?
                }
            }
            [fcard.RepetitionManagement.Repeaters.Repeater = fcard.Context.Experiment.TaskConfiguration.Objectives.Objective]
        }

        Experiment : NominalHyperparameter {
            Energy: NominalHyperparameter {
                Frequency: FloatOrdinalHyperparameter{
                    [Categories = {1200.0, 1300.0, 1400.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2200.0, 2300.0, 2400.0, 2500.0, 2700.0, 2800.0, 2900.0, 2901.0}]
                }
                Threads: IntegerOrdinalHyperparameter{
                    [Categories = {1, 2, 4, 8, 16, 32}]
                }
            }
        }

    }
    Model {
        xor Structure {
           Flat
           Hierarchical
        }
        ModelStructure -> predefined
        [if gcard.Context.Model.Structure == Flat then fcard.Predictor.Models.Model = 1 else fcard.Predictor.Models.Model = 2]
        [ModelStructure = gcard.Context.Model.Structure]
    }
}
""")
        # 5 | click | css=input:nth-child(3) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(3)").click()
        # 6 | type | id=id_0-fcard_StopCondition.QuantityBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.QuantityBasedSC").send_keys("1")
        # 7 | type | id=id_0-fcard_StopCondition.BadConfigurationBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.BadConfigurationBasedSC").send_keys("1")
        # 8 | type | id=id_0-fcard_StopCondition.ImprovementBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.ImprovementBasedSC").send_keys("1")
        # 9 | type | id=id_0-fcard_StopCondition.TimeBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.TimeBasedSC").send_keys("1")
        # 10 | type | id=id_0-fcard_TransferLearning.MultiTaskLearning | 1
        self.driver.find_element(By.ID, "id_0-fcard_TransferLearning.MultiTaskLearning").send_keys("1")
        # 11 | type | id=id_0-fcard_TransferLearning.ModelsRecommendation | 1
        self.driver.find_element(By.ID, "id_0-fcard_TransferLearning.ModelsRecommendation").send_keys("1")
        # 12 | type | id=id_0-fcard_Context.Experiment.TaskConfiguration.Scenario.FromFile.AdditionalParameter | 0
        self.driver.find_element(By.ID, "id_0-fcard_Context.Experiment.TaskConfiguration.Scenario.FromFile.AdditionalParameter").send_keys("0")
        # 13 | type | id=id_0-fcard_Context.Experiment.TaskConfiguration.Objectives.Objective.MaxTimeToRunTask | 1
        self.driver.find_element(By.ID, "id_0-fcard_Context.Experiment.TaskConfiguration.Objectives.Objective.MaxTimeToRunTask").send_keys("1")
        # 14 | type | id=id_0-fcard_Context.Experiment.TaskConfiguration.Objectives.Objective | 2
        self.driver.find_element(By.ID, "id_0-fcard_Context.Experiment.TaskConfiguration.Objectives.Objective").send_keys("2")
        # 15 | click | css=input:nth-child(12) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(12)").click()
        # 16 | click | css=li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(1) > label").click()
        # 17 | click | id=id_1-gcard_OutliersDetection_1 |
        self.driver.find_element(By.ID, "id_1-gcard_OutliersDetection_1").click()
        # 18 | click | id=id_1-gcard_OutliersDetection_2 |
        self.driver.find_element(By.ID, "id_1-gcard_OutliersDetection_2").click()
        # 19 | click | id=id_1-gcard_OutliersDetection_3 |
        self.driver.find_element(By.ID, "id_1-gcard_OutliersDetection_3").click()
        # 20 | click | id=id_1-gcard_OutliersDetection_4 |
        self.driver.find_element(By.ID, "id_1-gcard_OutliersDetection_4").click()
        # 21 | click | id=id_1-gcard_RepetitionManagement.Repeaters.Repeater |
        self.driver.find_element(By.ID, "id_1-gcard_RepetitionManagement.Repeaters.Repeater").click()
        # 22 | select | id=id_1-gcard_RepetitionManagement.Repeaters.Repeater | label=AcceptableErrorBased
        dropdown = self.driver.find_element(By.ID, "id_1-gcard_RepetitionManagement.Repeaters.Repeater")
        dropdown.find_element(By.XPATH, "//option[. = 'AcceptableErrorBased']").click()
        # 23 | click | css=#id_1-gcard_RepetitionManagement\.Repeaters\.Repeater > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_RepetitionManagement\\.Repeaters\\.Repeater > option:nth-child(2)").click()
        # 24 | click | id=id_1-gcard_Predictor.Models.Model |
        self.driver.find_element(By.ID, "id_1-gcard_Predictor.Models.Model").click()
        # 25 | click | css=#id_1-gcard_Predictor\.Models\.Model > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Predictor\\.Models\\.Model > option:nth-child(1)").click()
        # 26 | click | id=id_1-gcard_TransferLearning.TransferExpediencyDetermination.NumberOfSimilarExperiments |
        self.driver.find_element(By.ID, "id_1-gcard_TransferLearning.TransferExpediencyDetermination.NumberOfSimilarExperiments").click()
        # 27 | select | id=id_1-gcard_TransferLearning.TransferExpediencyDetermination.NumberOfSimilarExperiments | label=Categorical
        dropdown = self.driver.find_element(By.ID, "id_1-gcard_TransferLearning.TransferExpediencyDetermination.NumberOfSimilarExperiments")
        dropdown.find_element(By.XPATH, "//option[. = 'Categorical']").click()
        # 28 | click | css=#id_1-gcard_TransferLearning\.TransferExpediencyDetermination\.NumberOfSimilarExperiments > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_TransferLearning\\.TransferExpediencyDetermination\\.NumberOfSimilarExperiments > option:nth-child(2)").click()
        # 29 | click | id=id_1-gcard_TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.RecommendationGranularity |
        self.driver.find_element(By.ID, "id_1-gcard_TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.RecommendationGranularity").click()
        # 30 | click | css=#id_1-gcard_TransferLearning\.ModelsRecommendation\.DynamicModelsRecommendation\.RecommendationGranularity > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_TransferLearning\\.ModelsRecommendation\\.DynamicModelsRecommendation\\.RecommendationGranularity > option:nth-child(1)").click()
        # 31 | click | id=id_1-gcard_Context.Experiment.TaskConfiguration.Scenario |
        self.driver.find_element(By.ID, "id_1-gcard_Context.Experiment.TaskConfiguration.Scenario").click()
        # 32 | click | css=#id_1-gcard_Context\.Experiment\.TaskConfiguration\.Scenario > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Context\\.Experiment\\.TaskConfiguration\\.Scenario > option:nth-child(1)").click()
        # 33 | click | id=id_1-gcard_Context.Model.Structure |
        self.driver.find_element(By.ID, "id_1-gcard_Context.Model.Structure").click()
        # 34 | select | id=id_1-gcard_Context.Model.Structure | label=Hierarchical
        dropdown = self.driver.find_element(By.ID, "id_1-gcard_Context.Model.Structure")
        dropdown.find_element(By.XPATH, "//option[. = 'Hierarchical']").click()
        # 35 | click | css=#id_1-gcard_Context\.Model\.Structure > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Context\\.Model\\.Structure > option:nth-child(2)").click()
        # 36 | click | css=input:nth-child(12) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(12)").click()
        # 37 | type | id=id_2-Context.Experiment.Experiment.Energy.Frequency.Default | 2900.0
        self.driver.find_element(By.ID, "id_2-Context.Experiment.Experiment.Energy.Frequency.Default").send_keys("2900.0")
        # 38 | type | id=id_2-Context.Experiment.Experiment.Energy.Threads.Default | 32
        self.driver.find_element(By.ID, "id_2-Context.Experiment.Experiment.Energy.Threads.Default").send_keys("32")
        # 39 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.DataType | float
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.DataType").send_keys("float")
        # 40 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.ExpectedValuesRange | 0, 150000
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.ExpectedValuesRange").send_keys("0, 150000")
        # 41 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.MaxTimeToRunTask | 10
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.MaxTimeToRunTask").send_keys("10")
        # 42 | click | css=#id_2-Context\.Experiment\.TaskConfiguration\.Objectives\.Objective_0\.Minimization > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_2-Context\\.Experiment\\.TaskConfiguration\\.Objectives\\.Objective_0\\.Minimization > li:nth-child(1) > label").click()
        # 43 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.ModelPriority | 1
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.ModelPriority").send_keys("1")
        # 44 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.Name | energy
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.Name").send_keys("energy")
        # 45 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.Priority | 1
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_0.Priority").send_keys("1")
        # 46 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.DataType | float
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.DataType").send_keys("float")
        # 47 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.ExpectedValuesRange | 0, 10000
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.ExpectedValuesRange").send_keys("0, 10000")
        # 48 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.MaxTimeToRunTask | 9
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.MaxTimeToRunTask").send_keys("9")
        # 49 | click | css=#id_2-Context\.Experiment\.TaskConfiguration\.Objectives\.Objective_1\.Minimization > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_2-Context\\.Experiment\\.TaskConfiguration\\.Objectives\\.Objective_1\\.Minimization > li:nth-child(1) > label").click()
        # 50 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.ModelPriority | 2
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.ModelPriority").send_keys("2")
        # 51 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.Name | time
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.Name").send_keys("time")
        # 52 | type | id=id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.Priority | 2
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Objectives.Objective_1.Priority").send_keys("2")
        # 53 | type | id=id_2-Context.Experiment.TaskConfiguration.Scenario.FromFile.WsFile | search_space_96/Radix-500mio_full.csv
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.Scenario.FromFile.WsFile").send_keys("search_space_96/Radix-500mio_full.csv")
        # 54 | type | id=id_2-Context.Experiment.TaskConfiguration.TaskName | energy_consumption
        self.driver.find_element(By.ID, "id_2-Context.Experiment.TaskConfiguration.TaskName").send_keys("energy_consumption")
        # 55 | click | css=input:nth-child(23) | 
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(23)").click()
        # 56 | click | id=id_3-gcard_RepetitionManagement.Repeaters.Repeater_0 |
        self.driver.find_element(By.ID, "id_3-gcard_RepetitionManagement.Repeaters.Repeater_0").click()
        dropdown = self.driver.find_element(By.ID, "id_3-gcard_RepetitionManagement.Repeaters.Repeater_0")
        dropdown.find_element(By.XPATH, "//option[. = 'QuantityBased']").click()
        # 57 | click | css=#id_3-gcard_RepetitionManagement\.Repeaters\.Repeater_0 > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_3-gcard_RepetitionManagement\\.Repeaters\\.Repeater_0 > option:nth-child(1)").click()
        # 58 | click | id=id_3-gcard_RepetitionManagement.Repeaters.Repeater_1 |
        self.driver.find_element(By.ID, "id_3-gcard_RepetitionManagement.Repeaters.Repeater_1").click()
        # 59 | select | id=id_3-gcard_RepetitionManagement.Repeaters.Repeater_1 | label=AcceptableErrorBased

        # 60 | click | css=#id_3-gcard_RepetitionManagement\.Repeaters\.Repeater_1 > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_3-gcard_RepetitionManagement\\.Repeaters\\.Repeater_1 > option:nth-child(2)").click()
        # 61 | click | id=id_3-gcard_Predictor.Models.Model_0 |
        self.driver.find_element(By.ID, "id_3-gcard_Predictor.Models.Model_0").click()
        dropdown = self.driver.find_element(By.ID, "id_3-gcard_Predictor.Models.Model_0")
        dropdown.find_element(By.XPATH, "//option[. = 'TPE']").click()
        # 62 | click | css=#id_3-gcard_Predictor\.Models\.Model_0 > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_3-gcard_Predictor\\.Models\\.Model_0 > option:nth-child(1)").click()
        # 63 | click | id=id_3-gcard_Predictor.Models.Model_1 |
        self.driver.find_element(By.ID, "id_3-gcard_Predictor.Models.Model_1").click()
        # 64 | select | id=id_3-gcard_Predictor.Models.Model_1 | label=MAB

        # 65 | click | css=#id_3-gcard_Predictor\.Models\.Model_1 > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_3-gcard_Predictor\\.Models\\.Model_1 > option:nth-child(2)").click()
        # 66 | click | css=input:nth-child(9) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(9)").click()
        # 67 | type | id=id_4-RepetitionManagement.DefaultConfiguration.TasksPerConfiguration | 10
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.DefaultConfiguration.TasksPerConfiguration").send_keys("10")
        # 68 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_0.QuantityBased.MaxTasksPerConfiguration | 10
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_0.QuantityBased.MaxTasksPerConfiguration").send_keys("10")
        # 69 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_0.QuantityBased.MinTasksPerConfiguration | 2
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_0.QuantityBased.MinTasksPerConfiguration").send_keys("1")
        # 70 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.BaseAcceptableErrors | 5
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.BaseAcceptableErrors").send_keys("5")
        # 71 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ConfidenceLevels | 0.95
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ConfidenceLevels").send_keys("0.95")
        # 72 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.DevicesAccuracyClasses | 0
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.DevicesAccuracyClasses").send_keys("0")
        # 73 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.DevicesScaleAccuracies | 0
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.DevicesScaleAccuracies").send_keys("0")
        # 74 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.MaxAcceptableErrors | 50
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.MaxAcceptableErrors").send_keys("50")
        # 75 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.RatiosMax | 10
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.RatiosMax").send_keys("10")
        # 76 | click | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.isEnabled_0 |
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.ExperimentAwareness.isEnabled_0").click()
        # 77 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MaxFailedTasksPerConfiguration | 5
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MaxFailedTasksPerConfiguration").send_keys("5")
        # 78 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MaxTasksPerConfiguration | 10
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MaxTasksPerConfiguration").send_keys("10")
        # 79 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MinTasksPerBadConfiguration | 1
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MinTasksPerBadConfiguration").send_keys("1")
        # 80 | type | id=id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MinTasksPerConfiguration | 2
        self.driver.find_element(By.ID, "id_4-RepetitionManagement.Repeaters.Repeater_1.AcceptableErrorBased.MinTasksPerConfiguration").send_keys("2")
        # 81 | click | css=input:nth-child(19) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(19)").click()
        # 82 | type | id=id_5-Predictor.Models.Model_0.TPE.Parameters.BandwidthFactor | 3
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_0.TPE.Parameters.BandwidthFactor").send_keys("3")
        # 83 | type | id=id_5-Predictor.Models.Model_0.TPE.Parameters.MinBandwirth | 0.001
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_0.TPE.Parameters.MinBandwirth").send_keys("0.001")
        # 84 | type | id=id_5-Predictor.Models.Model_0.TPE.Parameters.RandomFraction | 0
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_0.TPE.Parameters.RandomFraction").send_keys("0")
        # 85 | type | id=id_5-Predictor.Models.Model_0.TPE.Parameters.SamplingSize | 96
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_0.TPE.Parameters.SamplingSize").send_keys("96")
        # 86 | type | id=id_5-Predictor.Models.Model_0.TPE.Parameters.TopNPercent | 30
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_0.TPE.Parameters.TopNPercent").send_keys("30")
        # 87 | type | id=id_5-Predictor.Models.Model_1.MAB.Parameters.c | 1
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_1.MAB.Parameters.c").send_keys("1")
        # 88 | type | id=id_5-Predictor.Models.Model_1.MAB.Parameters.cType | float
        self.driver.find_element(By.ID, "id_5-Predictor.Models.Model_1.MAB.Parameters.cType").send_keys("float")
        # 89 | type | id=id_5-Predictor.WindowSize | 1.0
        self.driver.find_element(By.ID, "id_5-Predictor.WindowSize").send_keys("1.0")
        # 90 | click | css=input:nth-child(13) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(13)").click()
        # 91 | click | css=#id_6-TransferLearning\.ModelsRecommendation\.DynamicModelsRecommendation\.Filters\.FewShot > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_6-TransferLearning\\.ModelsRecommendation\\.DynamicModelsRecommendation\\.Filters\\.FewShot > li:nth-child(1) > label").click()
        # 92 | type | id=id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.PerformanceMetric | AverageRelativeImprovement
        self.driver.find_element(By.ID, "id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.PerformanceMetric").send_keys("AverageRelativeImprovement")
        # 93 | type | id=id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.RecommendationGranularity.Finite.Value | 15
        self.driver.find_element(By.ID, "id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.RecommendationGranularity.Finite.Value").send_keys("15")
        # 94 | type | id=id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.ThresholdType | soft
        self.driver.find_element(By.ID, "id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.ThresholdType").send_keys("soft")
        # 95 | type | id=id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.TimeToBuildModelThreshold | 0.2091163669213884
        self.driver.find_element(By.ID, "id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.TimeToBuildModelThreshold").send_keys("0.2091163669213884")
        # 96 | type | id=id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.TimeUnit | seconds
        self.driver.find_element(By.ID, "id_6-TransferLearning.ModelsRecommendation.DynamicModelsRecommendation.TimeUnit").send_keys("seconds")
        # 97 | click | css=#id_6-TransferLearning\.MultiTaskLearning\.Standard\.Filters\.FewShot > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_6-TransferLearning\\.MultiTaskLearning\\.Standard\\.Filters\\.FewShot > li:nth-child(1) > label").click()
        # 98 | type | id=id_6-TransferLearning.MultiTaskLearning.Standard.OldNewConfigsRatio | 2.416424349152367
        self.driver.find_element(By.ID, "id_6-TransferLearning.MultiTaskLearning.Standard.OldNewConfigsRatio").send_keys("2.416424349152367")
        # 99 | click | css=#id_6-TransferLearning\.MultiTaskLearning\.Standard\.TransferBestConfigsOnly > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_6-TransferLearning\\.MultiTaskLearning\\.Standard\\.TransferBestConfigsOnly > li:nth-child(1) > label").click()
        # 100 | click | css=#id_6-TransferLearning\.MultiTaskLearning\.Standard\.TransferFromMostSimilarExperimentsFirst > li:nth-child(2) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_6-TransferLearning\\.MultiTaskLearning\\.Standard\\.TransferFromMostSimilarExperimentsFirst > li:nth-child(2) > label").click()
        # 101 | type | id=id_6-TransferLearning.TransferExpediencyDetermination.ComparatorType | NormDifferenceComparator
        self.driver.find_element(By.ID, "id_6-TransferLearning.TransferExpediencyDetermination.ComparatorType").send_keys("NormDifferenceComparator")
        # 102 | type | id=id_6-TransferLearning.TransferExpediencyDetermination.MinNumberOfSamples | 10
        self.driver.find_element(By.ID, "id_6-TransferLearning.TransferExpediencyDetermination.MinNumberOfSamples").send_keys("10")
        # 103 | click | css=#id_6-TransferLearning\.isEnabled > li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "#id_6-TransferLearning\\.isEnabled > li:nth-child(1) > label").click()
        # 104 | click | css=input:nth-child(18) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(18)").click()
        # 105 | click | id=id_7-StopCondition.BadConfigurationBasedSC.Name | 
        self.driver.find_element(By.ID, "id_7-StopCondition.BadConfigurationBasedSC.Name").click()
        # 106 | type | id=id_7-StopCondition.BadConfigurationBasedSC.Name | BadConfigurationBased
        self.driver.find_element(By.ID, "id_7-StopCondition.BadConfigurationBasedSC.Name").send_keys("BadConfigurationBased")
        # 107 | type | id=id_7-StopCondition.BadConfigurationBasedSC.Parameters.MaxBadConfigurations | 10
        self.driver.find_element(By.ID, "id_7-StopCondition.BadConfigurationBasedSC.Parameters.MaxBadConfigurations").send_keys("10")
        # 108 | type | id=id_7-StopCondition.GuaranteedSC.Name | Guaranteed
        self.driver.find_element(By.ID, "id_7-StopCondition.GuaranteedSC.Name").send_keys("Guaranteed")
        # 109 | type | id=id_7-StopCondition.ImprovementBasedSC.Name | ImprovementBased
        self.driver.find_element(By.ID, "id_7-StopCondition.ImprovementBasedSC.Name").send_keys("ImprovementBased")
        # 110 | type | id=id_7-StopCondition.ImprovementBasedSC.Parameters.MaxConfigsWithoutImprovement | 5
        self.driver.find_element(By.ID, "id_7-StopCondition.ImprovementBasedSC.Parameters.MaxConfigsWithoutImprovement").send_keys("5")
        # 111 | type | id=id_7-StopCondition.QuantityBasedSC.Name | QuantityBased
        self.driver.find_element(By.ID, "id_7-StopCondition.QuantityBasedSC.Name").send_keys("QuantityBased")
        # 112 | type | id=id_7-StopCondition.QuantityBasedSC.Parameters.MaxConfigs | 15
        self.driver.find_element(By.ID, "id_7-StopCondition.QuantityBasedSC.Parameters.MaxConfigs").send_keys("15")
        # 113 | type | id=id_7-StopCondition.TimeBasedSC.Name | TimeBased
        self.driver.find_element(By.ID, "id_7-StopCondition.TimeBasedSC.Name").send_keys("TimeBased")
        # 114 | type | id=id_7-StopCondition.TimeBasedSC.Parameters.MaxRunTime | 10
        self.driver.find_element(By.ID, "id_7-StopCondition.TimeBasedSC.Parameters.MaxRunTime").send_keys("10")
        # 115 | type | id=id_7-StopCondition.TimeBasedSC.Parameters.TimeUnit | minutes
        self.driver.find_element(By.ID, "id_7-StopCondition.TimeBasedSC.Parameters.TimeUnit").send_keys("minutes")
        # 116 | click | css=input:nth-child(15) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(15)").click()
        # 117 | type | id=id_8-StopConditionTriggerLogic.Expression | (QuantityBased and Guaranteed and ImprovementBased) or BadConfigurationBased or TimeBased or FewShotLearningBased
        self.driver.find_element(By.ID, "id_8-StopConditionTriggerLogic.Expression").send_keys("(QuantityBased and Guaranteed and ImprovementBased) or BadConfigurationBased or TimeBased or FewShotLearningBased")
        # 118 | type | id=id_8-StopConditionTriggerLogic.InspectionParameters.RepetitionPeriod | 1
        self.driver.find_element(By.ID, "id_8-StopConditionTriggerLogic.InspectionParameters.RepetitionPeriod").send_keys("1")
        # 119 | type | id=id_8-StopConditionTriggerLogic.InspectionParameters.TimeUnit | seconds
        self.driver.find_element(By.ID, "id_8-StopConditionTriggerLogic.InspectionParameters.TimeUnit").send_keys("seconds")
        # 120 | click | css=input:nth-child(8) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(8)").click()
        # 121 | type | id=id_9-OutliersDetection.Chauvenet.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Chauvenet.MaxActiveNumberOfTasks").send_keys("10000")
        # 122 | type | id=id_9-OutliersDetection.Chauvenet.MinActiveNumberOfTasks | 30
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Chauvenet.MinActiveNumberOfTasks").send_keys("3")
        # 123 | type | id=id_9-OutliersDetection.Dixon.MaxActiveNumberOfTasks | 30
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Dixon.MaxActiveNumberOfTasks").send_keys("30")
        # 124 | type | id=id_9-OutliersDetection.Dixon.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Dixon.MinActiveNumberOfTasks").send_keys("3")
        # 125 | type | id=id_9-OutliersDetection.Grubbs.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Grubbs.MaxActiveNumberOfTasks").send_keys("10000")
        # 126 | type | id=id_9-OutliersDetection.Grubbs.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Grubbs.MinActiveNumberOfTasks").send_keys("3")
        # 127 | type | id=id_9-OutliersDetection.Mad.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Mad.MaxActiveNumberOfTasks").send_keys("10000")
        # 128 | type | id=id_9-OutliersDetection.Mad.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Mad.MinActiveNumberOfTasks").send_keys("3")
        # 129 | type | id=id_9-OutliersDetection.Quartiles.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Quartiles.MaxActiveNumberOfTasks").send_keys("10000")
        # 130 | type | id=id_9-OutliersDetection.Quartiles.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_9-OutliersDetection.Quartiles.MinActiveNumberOfTasks").send_keys("3")
        # 131 | click | css=input:nth-child(15) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(15)").click()
        # 132 | type | id=id_10-DomainDescription.DataFile | ./Resources/EnergyExperiment/EnergyExperimentData.json
        self.driver.find_element(By.ID, "id_10-DomainDescription.DataFile").send_keys("./Resources/EnergyExperiment/EnergyExperimentData.json")
        # 133 | click | css=input:nth-child(6) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(6)").click()
        # 134 | type | id=id_11-DefaultConfigurationHandler.type | Random
        self.driver.find_element(By.ID, "id_11-DefaultConfigurationHandler.type").send_keys("Random")
        # 135 | click | css=input:nth-child(6) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(6)").click()
        # 136 | type | id=id_12-SelectionAlgorithm.type | Sobol
        self.driver.find_element(By.ID, "id_12-SelectionAlgorithm.type").send_keys("Sobol")
        # 137 | click | css=input:nth-child(6) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(6)").click()
        # 138 | type | id=id_13-General.NumberOfWorkers | 3
        self.driver.find_element(By.ID, "id_13-General.NumberOfWorkers").send_keys("3")
        # 139 | type | id=id_13-General.ResultStorage | ./Results/
        self.driver.find_element(By.ID, "id_13-General.ResultStorage").send_keys("./Results/")
        # 140 | click | css=input:nth-child(7) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(7)").click()
