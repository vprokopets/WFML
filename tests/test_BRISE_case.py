# Generated by Selenium IDE

from os.path import dirname, abspath
from selenium import webdriver
from selenium.webdriver.common.by import By


class TestBRISEUPD():
    def setup_method(self):
        self.driver = webdriver.Firefox(executable_path=f'{dirname(dirname(abspath(__file__)))}/geckodriver')
        self.vars = {}

    def teardown_method(self):
        self.driver.quit()

    def test_bRISEUPD(self):
        # Test name: BRISE_UPD
        # Step # | name | target | value
        # 1 | open | /wizard/test/ |
        self.driver.get("http://127.0.0.1:8000/wizard/test/")
        # 2 | setWindowSize | 1853x1053 |
        self.driver.set_window_size(1853, 1053)
        # 2.1 | click | id=id_model_field |
        self.driver.find_element(By.ID, "id_model_field").click()
        # 2.2 | type | id=id_model_field | \n\n    General {\n        NumberOfWorkers -> integer\n        result_storage -> string\n        [NumberOfWorkers >= 1]\n    }\n    SelectionAlgorithm {\n        type -> string\n        [type in {Sobol, MersenneTwister}]\n    }\n    abstract OutliersDetection 5{\n        MinActiveNumberOfTasks -> integer\n        MaxActiveNumberOfTasks -> integer\n        [MinActiveNumberOfTasks >= 3]\n        [MaxActiveNumberOfTasks >= 3]\n        [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]\n    }\n    or OD{\n        Dixon : OutliersDetection\n        Grubbs : OutliersDetection\n        Chauvenet : OutliersDetection\n        Quartiles : OutliersDetection\n        Mad : OutliersDetection\n    }\n    abstract AbstrRepeater {\n        MinTasksPerConfiguration -> integer\n        MaxTasksPerConfiguration -> integer\n    }\n    xor Repeater{\n        DefaultRepeater : AbstrRepeater {\n            [MinTasksPerConfiguration >= 2]\n            [MaxTasksPerConfiguration >= 2]\n        }\n        AcceptableErrorBasedRepeater: AbstrRepeater {\n            [MinTasksPerConfiguration >= 1]\n            [MaxTasksPerConfiguration >= 1]\n            MaxFailedTasksPerConfiguration -> integer\n            BaseAcceptableErrors -> integerArray\n            ConfidenceLevels -> floatArray\n            DevicesScaleAccuracies -> integerArray\n            DevicesAccuracyClasses -> integerArray\n            ExperimentAwareness {\n                isEnabled -> boolean\n                MaxAcceptableErrors -> integerArray\n                RatiosMax -> integerArray\n            }\n        }\n    }\n    abstract TreeParzenEstimator {\n        Parameters {\n            TopNPercent -> integer\n            RandomFraction -> integer\n            BandwidthFactor -> integer\n            MinBandwirth -> float\n            SamplingSize -> integer\n        }\n    }\n    abstract MultiArmedBandit {\n        Parameters {\n            xor cType{\n                int\n                float\n                std\n            }\n            c -> float\n            [if gcard.cType == float then 0 <= c]\n            [if gcard.cType == float then c <= 1]\n            [if gcard.cType == std then c = std]\n        }\n    }\n    abstract ModelMock\n    abstract SciKitLearn {\n        Type -> string\n        Parameters {\n            SamplingSize -> integer\n            MinimalScore -> float\n            CrossValidationSplits -> integer\n            TestSize -> float\n            DataPreprocessing {\n                OrdinalHyperparameter -> string\n                NominalHyperparameter -> string\n                IntegerHyperparameter -> string\n                FloatHyperparameter -> string\n            }\n            UnderlyingModelParameters {\n                n_iter -> integer\n                tol -> float\n                normalize -> boolean\n            }\n        }\n    }\n    Predictor {\n        WindowSize -> float\n        xor Models 1..5 {\n            TPE : TreeParzenEstimator\n            MAB : MultiArmedBandit\n            MM : ModelMock\n            skLearn : SciKitLearn\n        }\n    }\n    StopConditionTriggerLogic {\n        Expression -> string\n        InspectionParameters {\n            RepetitionPerion -> integer\n            TimeUnit -> string\n            [RepetitionPerion > 0]\n            [TimeUnit in {seconds, minutes, hours, days}]\n        }\n    }\n    abstract SC {\n        Name -> string\n        Type -> predefined\n    }\n    StopCondition {\n        QuantityBasedSC : SC 1..5{\n            Parameters {\n                MaxConfigs -> integer\n                [MaxConfigs > 0]\n            }\n            [Type = QuantityBased]\n        }\n        GuaranteedSC : SC 1 {\n            [Type = Guaranted]\n        }\n        BadConfigurationBasedSC : SC 1..5{\n            Parameters {\n                MaxBadConfigurations -> integer\n                [MaxBadConfigurations > 0]\n            }\n            [Type = BadConfigurationBased]\n        }\n        ImprovementBasedSC : SC 1..5{\n            Parameters {\n                MaxConfigsWithoutImprovement -> integer\n                [MaxConfigsWithoutImprovement > 0]\n            }\n            [Type = ImprovementBased]\n        }\n        TimeBasedSC : SC 1..5{\n            Parameters {\n                MaxRunTime -> integer\n                TimeUnit -> string\n                [MaxRunTime > 0]\n                [TimeUnit in {seconds, minutes, hours, days}]\n            }\n            [Type = TimeBased]\n        }\n    }\n
        self.driver.find_element(By.ID, "id_model_field").send_keys("""

    General {
        NumberOfWorkers -> integer
        result_storage -> string
        [NumberOfWorkers >= 1]
    }
    SelectionAlgorithm {
        type -> string
        [type in {Sobol, MersenneTwister}]
    }
    abstract OutliersDetection 5{
        MinActiveNumberOfTasks -> integer
        MaxActiveNumberOfTasks -> integer
        [MinActiveNumberOfTasks >= 3]
        [MaxActiveNumberOfTasks >= 3]
        [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]
    }
    or OD{
        Dixon : OutliersDetection
        Grubbs : OutliersDetection
        Chauvenet : OutliersDetection
        Quartiles : OutliersDetection
        Mad : OutliersDetection
    }
    abstract AbstrRepeater {
        MinTasksPerConfiguration -> integer
        MaxTasksPerConfiguration -> integer
    }
    xor Repeater{
        DefaultRepeater : AbstrRepeater {
            [MinTasksPerConfiguration >= 2]
            [MaxTasksPerConfiguration >= 2]
        }
        AcceptableErrorBasedRepeater: AbstrRepeater {
            [MinTasksPerConfiguration >= 1]
            [MaxTasksPerConfiguration >= 1]
            MaxFailedTasksPerConfiguration -> integer
            BaseAcceptableErrors -> integerArray
            ConfidenceLevels -> floatArray
            DevicesScaleAccuracies -> integerArray
            DevicesAccuracyClasses -> integerArray
            ExperimentAwareness {
                isEnabled -> boolean
                MaxAcceptableErrors -> integerArray
                RatiosMax -> integerArray
            }
        }
    }
    abstract TreeParzenEstimator {
        Parameters {
            TopNPercent -> integer
            RandomFraction -> integer
            BandwidthFactor -> integer
            MinBandwirth -> float
            SamplingSize -> integer
        }
    }
    abstract MultiArmedBandit {
        Parameters {
            xor cType{
                int
                float
                std
            }
            c -> float
            [if gcard.cType == float then 0 <= c]
            [if gcard.cType == float then c <= 1]
            [if gcard.cType == std then c = std]
        }
    }
    abstract ModelMock
    abstract SciKitLearn {
        Type -> string
        Parameters {
            SamplingSize -> integer
            MinimalScore -> float
            CrossValidationSplits -> integer
            TestSize -> float
            DataPreprocessing {
                OrdinalHyperparameter -> string
                NominalHyperparameter -> string
                IntegerHyperparameter -> string
                FloatHyperparameter -> string
            }
            UnderlyingModelParameters {
                n_iter -> integer
                tol -> float
                normalize -> boolean
            }
        }
    }
    Predictor {
        WindowSize -> float
        xor Models 1..5 {
            TPE : TreeParzenEstimator
            MAB : MultiArmedBandit
            MM : ModelMock
            skLearn : SciKitLearn
        }
    }
    StopConditionTriggerLogic {
        Expression -> string
        InspectionParameters {
            RepetitionPerion -> integer
            TimeUnit -> string
            [RepetitionPerion > 0]
            [TimeUnit in {seconds, minutes, hours, days}]
        }
    }
    abstract SC {
        Name -> string
        Type -> predefined
    }
    StopCondition {
        QuantityBasedSC : SC 1..5{
            Parameters {
                MaxConfigs -> integer
                [MaxConfigs > 0]
            }
            [Type = QuantityBased]
        }
        GuaranteedSC : SC 1 {
            [Type = Guaranted]
        }
        BadConfigurationBasedSC : SC 1..5{
            Parameters {
                MaxBadConfigurations -> integer
                [MaxBadConfigurations > 0]
            }
            [Type = BadConfigurationBased]
        }
        ImprovementBasedSC : SC 1..5{
            Parameters {
                MaxConfigsWithoutImprovement -> integer
                [MaxConfigsWithoutImprovement > 0]
            }
            [Type = ImprovementBased]
        }
        TimeBasedSC : SC 1..5{
            Parameters {
                MaxRunTime -> integer
                TimeUnit -> string
                [MaxRunTime > 0]
                [TimeUnit in {seconds, minutes, hours, days}]
            }
            [Type = TimeBased]
        }
    }
""")
        # 3 | click | css=input:nth-child(3) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(3)").click()
        # 4 | type | id=id_0-fcard_Predictor.Models | 1
        self.driver.find_element(By.ID, "id_0-fcard_Predictor.Models").send_keys("1")
        # 5 | type | id=id_0-fcard_StopCondition.QuantityBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.QuantityBasedSC").send_keys("1")
        # 6 | type | id=id_0-fcard_StopCondition.BadConfigurationBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.BadConfigurationBasedSC").send_keys("1")
        # 7 | type | id=id_0-fcard_StopCondition.ImprovementBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.ImprovementBasedSC").send_keys("1")
        # 8 | type | id=id_0-fcard_StopCondition.TimeBasedSC | 1
        self.driver.find_element(By.ID, "id_0-fcard_StopCondition.TimeBasedSC").send_keys("1")
        # 9 | click | css=input:nth-child(8) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(8)").click()
        # 10 | click | css=li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(1) > label").click()
        # 11 | click | css=li:nth-child(2) > label |
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) > label").click()
        # 12 | click | id=id_1-gcard_OD_2 |
        self.driver.find_element(By.ID, "id_1-gcard_OD_2").click()
        # 13 | click | id=id_1-gcard_OD_3 |
        self.driver.find_element(By.ID, "id_1-gcard_OD_3").click()
        # 14 | click | id=id_1-gcard_OD_4 |
        self.driver.find_element(By.ID, "id_1-gcard_OD_4").click()
        # 15 | click | id=id_1-gcard_Repeater |
        self.driver.find_element(By.ID, "id_1-gcard_Repeater").click()
        # 16 | select | id=id_1-gcard_Repeater | label=AcceptableErrorBasedRepeater
        dropdown = self.driver.find_element(By.ID, "id_1-gcard_Repeater")
        dropdown.find_element(By.XPATH, "//option[. = 'AcceptableErrorBasedRepeater']").click()
        # 17 | click | css=#id_1-gcard_Repeater > option:nth-child(2) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Repeater > option:nth-child(2)").click()
        # 18 | click | id=id_1-gcard_Predictor.Models.MAB.Parameters.cType |
        self.driver.find_element(By.ID, "id_1-gcard_Predictor.Models.MAB.Parameters.cType").click()
        # 19 | click | css=#id_1-gcard_Predictor\.Models\.MAB\.Parameters\.cType > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Predictor\\.Models\\.MAB\\.Parameters\\.cType > option:nth-child(1)").click()
        # 20 | click | id=id_1-gcard_Predictor.Models |
        self.driver.find_element(By.ID, "id_1-gcard_Predictor.Models").click()
        # 21 | click | css=#id_1-gcard_Predictor\.Models > option:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, "#id_1-gcard_Predictor\\.Models > option:nth-child(1)").click()
        # 22 | click | css=input:nth-child(9) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(9)").click()
        # 23 | type | id=id_2-StopCondition.BadConfigurationBasedSC.Name | BCBSC
        self.driver.find_element(By.ID, "id_2-StopCondition.BadConfigurationBasedSC.Name").send_keys("BCBSC")
        # 24 | type | id=id_2-StopCondition.BadConfigurationBasedSC.Parameters.MaxBadConfigurations | 10
        self.driver.find_element(By.ID, "id_2-StopCondition.BadConfigurationBasedSC.Parameters.MaxBadConfigurations").send_keys("10")
        # 25 | type | id=id_2-StopCondition.GuaranteedSC.Name | GSC
        self.driver.find_element(By.ID, "id_2-StopCondition.GuaranteedSC.Name").send_keys("GSC")
        # 26 | type | id=id_2-StopCondition.ImprovementBasedSC.Name | IBSC
        self.driver.find_element(By.ID, "id_2-StopCondition.ImprovementBasedSC.Name").send_keys("IBSC")
        # 27 | type | id=id_2-StopCondition.ImprovementBasedSC.Parameters.MaxConfigsWithoutImprovement | 5
        self.driver.find_element(By.ID, "id_2-StopCondition.ImprovementBasedSC.Parameters.MaxConfigsWithoutImprovement").send_keys("5")
        # 28 | type | id=id_2-StopCondition.QuantityBasedSC.Name | QBSC
        self.driver.find_element(By.ID, "id_2-StopCondition.QuantityBasedSC.Name").send_keys("QBSC")
        # 29 | type | id=id_2-StopCondition.QuantityBasedSC.Parameters.MaxConfigs | 15
        self.driver.find_element(By.ID, "id_2-StopCondition.QuantityBasedSC.Parameters.MaxConfigs").send_keys("15")
        # 30 | type | id=id_2-StopCondition.TimeBasedSC.Name | TBSC
        self.driver.find_element(By.ID, "id_2-StopCondition.TimeBasedSC.Name").send_keys("TBSC")
        # 31 | type | id=id_2-StopCondition.TimeBasedSC.Parameters.MaxRunTime | 10
        self.driver.find_element(By.ID, "id_2-StopCondition.TimeBasedSC.Parameters.MaxRunTime").send_keys("10")
        # 32 | type | id=id_2-StopCondition.TimeBasedSC.Parameters.TimeUnit | minutes
        self.driver.find_element(By.ID, "id_2-StopCondition.TimeBasedSC.Parameters.TimeUnit").send_keys("minutes")
        # 33 | click | css=input:nth-child(15) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(15)").click()
        # 34 | click | id=id_3-StopConditionTriggerLogic.Expression |
        self.driver.find_element(By.ID, "id_3-StopConditionTriggerLogic.Expression").click()
        # 35 | type | id=id_3-StopConditionTriggerLogic.Expression | (QuantityBased and Guaranteed and ImprovementBased) or BadConfigurationBased or TimeBased
        self.driver.find_element(By.ID, "id_3-StopConditionTriggerLogic.Expression").send_keys("(QuantityBased and Guaranteed and ImprovementBased) or BadConfigurationBased or TimeBased")
        # 36 | type | id=id_3-StopConditionTriggerLogic.InspectionParameters.RepetitionPerion | 1
        self.driver.find_element(By.ID, "id_3-StopConditionTriggerLogic.InspectionParameters.RepetitionPerion").send_keys("1")
        # 37 | type | id=id_3-StopConditionTriggerLogic.InspectionParameters.TimeUnit | seconds
        self.driver.find_element(By.ID, "id_3-StopConditionTriggerLogic.InspectionParameters.TimeUnit").send_keys("seconds")
        # 38 | click | css=input:nth-child(8) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(8)").click()
        # 39 | click | id=id_4-Predictor.Models.TPE.Parameters.BandwidthFactor |
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.BandwidthFactor").click()
        # 40 | type | id=id_4-Predictor.Models.TPE.Parameters.BandwidthFactor | 3
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.BandwidthFactor").send_keys("3")
        # 41 | type | id=id_4-Predictor.Models.TPE.Parameters.MinBandwirth | 0.001
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.MinBandwirth").send_keys("0.001")
        # 42 | type | id=id_4-Predictor.Models.TPE.Parameters.RandomFraction | 0
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.RandomFraction").send_keys("0")
        # 43 | type | id=id_4-Predictor.Models.TPE.Parameters.SamplingSize | 96
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.SamplingSize").send_keys("96")
        # 44 | type | id=id_4-Predictor.Models.TPE.Parameters.TopNPercent | 30
        self.driver.find_element(By.ID, "id_4-Predictor.Models.TPE.Parameters.TopNPercent").send_keys("30")
        # 45 | type | id=id_4-Predictor.WindowSize | 1.0
        self.driver.find_element(By.ID, "id_4-Predictor.WindowSize").send_keys("1.0")
        # 46 | click | css=input:nth-child(11) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(11)").click()
        # 47 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.BaseAcceptableErrors | 5
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.BaseAcceptableErrors").send_keys("5")
        # 48 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.ConfidenceLevels | 0.95
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.ConfidenceLevels").send_keys("0.95")
        # 49 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.DevicesAccuracyClasses | 0
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.DevicesAccuracyClasses").send_keys("0")
        # 50 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.DevicesScaleAccuracies | 0
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.DevicesScaleAccuracies").send_keys("0")
        # 51 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.ExperimentAwareness.MaxAcceptableErrors | 50
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.ExperimentAwareness.MaxAcceptableErrors").send_keys("50")
        # 52 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.ExperimentAwareness.RatiosMax | 10
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.ExperimentAwareness.RatiosMax").send_keys("10")
        # 53 | click | css=li:nth-child(1) > label |
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(1) > label").click()
        # 54 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.MaxFailedTasksPerConfiguration | 5
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.MaxFailedTasksPerConfiguration").send_keys("5")
        # 55 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.MaxTasksPerConfiguration | 10
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.MaxTasksPerConfiguration").send_keys("10")
        # 56 | type | id=id_5-Repeater.AcceptableErrorBasedRepeater.MinTasksPerConfiguration | 2
        self.driver.find_element(By.ID, "id_5-Repeater.AcceptableErrorBasedRepeater.MinTasksPerConfiguration").send_keys("2")
        # 57 | click | css=input:nth-child(15) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(15)").click()
        # 58 | type | id=id_6-OD.Chauvenet.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_6-OD.Chauvenet.MaxActiveNumberOfTasks").send_keys("10000")
        # 59 | type | id=id_6-OD.Chauvenet.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_6-OD.Chauvenet.MinActiveNumberOfTasks").send_keys("3")
        # 60 | type | id=id_6-OD.Dixon.MaxActiveNumberOfTasks | 30
        self.driver.find_element(By.ID, "id_6-OD.Dixon.MaxActiveNumberOfTasks").send_keys("30")
        # 61 | type | id=id_6-OD.Dixon.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_6-OD.Dixon.MinActiveNumberOfTasks").send_keys("3")
        # 62 | type | id=id_6-OD.Grubbs.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_6-OD.Grubbs.MaxActiveNumberOfTasks").send_keys("10000")
        # 63 | type | id=id_6-OD.Grubbs.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_6-OD.Grubbs.MinActiveNumberOfTasks").send_keys("3")
        # 64 | type | id=id_6-OD.Mad.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_6-OD.Mad.MaxActiveNumberOfTasks").send_keys("10000")
        # 65 | type | id=id_6-OD.Mad.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_6-OD.Mad.MinActiveNumberOfTasks").send_keys("3")
        # 66 | type | id=id_6-OD.Quartiles.MaxActiveNumberOfTasks | 10000
        self.driver.find_element(By.ID, "id_6-OD.Quartiles.MaxActiveNumberOfTasks").send_keys("10000")
        # 67 | type | id=id_6-OD.Quartiles.MinActiveNumberOfTasks | 3
        self.driver.find_element(By.ID, "id_6-OD.Quartiles.MinActiveNumberOfTasks").send_keys("3")
        # 68 | click | css=input:nth-child(15) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(15)").click()
        # 69 | type | id=id_7-SelectionAlgorithm.type | Sobol
        self.driver.find_element(By.ID, "id_7-SelectionAlgorithm.type").send_keys("Sobol")
        # 70 | click | css=input:nth-child(6) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(6)").click()
        # 71 | type | id=id_8-General.NumberOfWorkers | 3
        self.driver.find_element(By.ID, "id_8-General.NumberOfWorkers").send_keys("3")
        # 72 | type | id=id_8-General.result_storage | ./Results/
        self.driver.find_element(By.ID, "id_8-General.result_storage").send_keys("./Results/")
        # 73 | click | css=input:nth-child(7) |
        self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(7)").click()

