General {
    NumberOfWorkers -> integer
    result_storage -> string
    [NumberOfWorkers >= 1]
}

SelectionAlgorithm {
    type -> string
    [type in {Sobol, MersenneTwister}]
}

DomainDescription {
    DataFile -> string
}

TaskCondiguration {
    TaskName -> integer
    xor Scenario {
        FromFile {
            WsFile -> string
            AdditionalParameter * {
                Name -> string
                Value -> string
            }
        }
        FromDescription {
            Problem -> string
            InitializationParameters -> string
            Budget {
                Type -> string
                Amount -> integer
            }
            Hyperparameters -> string
        }
    }
    Objectives + {
        Name -> string
        DataType -> string
        Minimization -> boolean
        Priority -> integer
        ModelPriority -> integer
        ExpectedValuesRange -> floatArray
        MaxTimeToRunTask -> integer ?
    }
    [fcard.Repeater.AcceptableErrorBasedRepeater = fcard.Objectives]
}

abstract OutliersDetector 5{
    MinActiveNumberOfTasks -> integer
    MaxActiveNumberOfTasks -> integer
    [MinActiveNumberOfTasks >= 3]
    [MaxActiveNumberOfTasks >= 3]
    [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]
}

or OutliersDetection{
    Dixon : OutliersDetector
    Grubbs : OutliersDetector
    Chauvenet : OutliersDetector
    Quartiles : OutliersDetector
    Mad : OutliersDetector
}

abstract AbstrRepeater {
    MinTasksPerConfiguration -> integer
    MaxTasksPerConfiguration -> integer
    [MinTasksPerConfiguration <= MaxTasksPerConfiguration]
}

xor Repeater{
    DefaultRepeater : AbstrRepeater {
        [MinTasksPerConfiguration >= 2]
        [MaxTasksPerConfiguration >= 2]
    }
    AcceptableErrorBasedRepeater: AbstrRepeater 1{
        [MinTasksPerConfiguration >= 1]
        [MaxTasksPerConfiguration >= 1]
        MaxFailedTasksPerConfiguration -> integer
        BaseAcceptableErrors -> integer
        ConfidenceLevels -> float
        DevicesScaleAccuracies -> integer
        DevicesAccuracyClasses -> integer
        ExperimentAwareness {
            isEnabled -> boolean
            MaxAcceptableErrors -> integer
            RatiosMax -> integer
        }
    }
}

abstract Model {
    Type -> predefined
}

abstract TreeParzenEstimator: Model {
    Parameters {
        TopNPercent -> integer
        RandomFraction -> integer
        BandwidthFactor -> integer
        MinBandwirth -> float
        SamplingSize -> integer
    }
    [Type = 'brise.TreeParzenEstimator']
}

abstract MultiArmedBandit: Model {
    Parameters {
        xor cType{
            int
            float
            std
        }
        c -> float
        [if gcard.cType == float then 0 <= c]
        [if gcard.cType == float then c <= 1]
        [if gcard.cType == std then c = std]
    }
    [type = 'brise.MultiArmedBandit']
}

abstract ModelMock

abstract SciKitLearn {
    Type -> string
    Parameters {
        SamplingSize -> integer
        MinimalScore -> float
        CrossValidationSplits -> integer
        TestSize -> float
        DataPreprocessing {
            OrdinalHyperparameter -> string
            NominalHyperparameter -> string
            IntegerHyperparameter -> string
            FloatHyperparameter -> string
        }
        UnderlyingModelParameters {
            n_iter -> integer
            tol -> float
            normalize -> boolean
        }
    }
}

Predictor {
    WindowSize -> float
    xor Models 1..5 {
        TPE : TreeParzenEstimator
        MAB : MultiArmedBandit
        MM : ModelMock
        skLearn : SciKitLearn
    }
}

StopConditionTriggerLogic {
    Expression -> string
    InspectionParameters {
        RepetitionPerion -> integer
        TimeUnit -> string
        [RepetitionPerion > 0]
        [TimeUnit in {seconds, minutes, hours, days}]
    }
}

abstract SC {
    Name -> string
    Type -> predefined
}

StopCondition {
    QuantityBasedSC : SC 1..5{
        Parameters {
            MaxConfigs -> integer
            [MaxConfigs > 0]
        }
        [Type = QuantityBased]
    }

    GuaranteedSC : SC 1 {
        [Type = Guaranted]
    }

    BadConfigurationBasedSC : SC 1..5{
        Parameters {
            MaxBadConfigurations -> integer
            [MaxBadConfigurations > 0]
        }
        [Type = BadConfigurationBased]
    }

    ImprovementBasedSC : SC 1..5{
        Parameters {
            MaxConfigsWithoutImprovement -> integer
            [MaxConfigsWithoutImprovement > 0]
        }
        [Type = ImprovementBased]
    }

    TimeBasedSC : SC 1..5{
        Parameters {
            MaxRunTime -> integer
            TimeUnit -> string
            [MaxRunTime > 0]
            [TimeUnit in {seconds, minutes, hours, days}]
        }
        [Type = TimeBased]
    }
}

abstract NominalHyperparameter {
    Type -> predefined
    [Type = NominalHyperparameter]
}

abstract OrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> string
    [Type = OrdinalHyperparameter]
    [Default in Categories]
}

abstract IntegerOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> integer
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
}

abstract FloatOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> float
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
}

abstract FloatHyperparameter {
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> float
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
}

abstract IntegerHyperparameter {
    Name -> predefined
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> integer
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
}

Experiment : NominalHyperparameter {
    Energy: NominalHyperparameter {
        Frequency: FloatOrdinalHyperparameter{
            [Categories = {1200.0, 1300.0, 1400.0}]
        }
        Threads: IntegerOrdinalHyperparameter{
            [Categories = {1, 2, 4}]
        }
    }
}
