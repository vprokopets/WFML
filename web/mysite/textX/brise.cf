

General {
    NumberOfWorkers -> integer
    result_storage -> string
    [NumberOfWorkers >= 1]
}

SelectionAlgorithm {
    type -> string
    [type in {Sobol, MersenneTwister}]
}

abstract OutliersDetection 5{
    MinActiveNumberOfTasks -> integer
    MaxActiveNumberOfTasks -> integer
    [MinActiveNumberOfTasks >= 3]
    [MaxActiveNumberOfTasks >= 3]
    [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]
}

or OD{
    Dixon : OutliersDetection
    Grubbs : OutliersDetection
    Chauvenet : OutliersDetection
    Quartiles : OutliersDetection
    Mad : OutliersDetection
}

abstract AbstrRepeater {
    MinTasksPerConfiguration -> integer
    MaxTasksPerConfiguration -> integer
}

xor Repeater{
    DefaultRepeater : AbstrRepeater {
        [MinTasksPerConfiguration >= 2]
        [MaxTasksPerConfiguration >= 2]
    }
    AcceptableErrorBasedRepeater: AbstrRepeater {
        [MinTasksPerConfiguration >= 1]
        [MaxTasksPerConfiguration >= 1]
        MaxFailedTasksPerConfiguration -> integer
        BaseAcceptableErrors -> integer
        ConfidenceLevels -> integer
        DevicesScaleAccuracies -> integer
        DevicesAccuracyClasses -> integer
        ExperimentAwareness {
            isEnabled -> boolean
            MaxAcceptableErrors -> integer
            RatiosMax -> integer
        }
    }
}

abstract TreeParzenEstimator {
    Parameters {
        TopNPercent -> integer
        RandomFraction -> integer
        BandwidthFactor -> integer
        MinBandwirth -> float
        SamplingSize -> integer
    }
}

abstract MultiArmedBandit {
    Parameters {
        xor cType{
            int
            float
            std
        }
        c -> float
        [if gcard.cType == float then 0 <= c]
        [if gcard.cType == float then c <= 1]
        [if gcard.cType == std then c = std]
    }
}

abstract ModelMock

abstract SciKitLearn {
    Type -> string
    Parameters {
        SamplingSize -> integer
        MinimalScore -> float
        CrossValidationSplits -> integer
        TestSize -> float
        DataPreprocessing {
            OrdinalHyperparameter -> string
            NominalHyperparameter -> string
            IntegerHyperparameter -> string
            FloatHyperparameter -> string
        }
        UnderlyingModelParameters {
            n_iter -> integer
            tol -> float
            normalize -> boolean
        }
    }
}

Predictor {
    WindowSize -> float
    xor Models 1..5 {
        TPE : TreeParzenEstimator
        MAB : MultiArmedBandit
        MM : ModelMock
        skLearn : SciKitLearn
    }
}

StopConditionTriggerLogic {
    Expression -> string
    InspectionParameters {
        RepetitionPerion -> integer
        TimeUnit -> string
        [RepetitionPerion > 0]
    }
}

abstract StopCondition {
    Name -> string
    Type -> predefined
}

QuantityBasedSC : StopCondition 1..5{
    Parameters {
        MaxConfigs -> integer
        [MaxConfigs > 0]
    }
    [Type = QuantityBased]
}

GuaranteedSC : StopCondition 1 {
    [Type = Guaranted]
}

BadConfigurationBasedSC : StopCondition 1..5{
    Parameters {
        MaxBadConfigurations -> integer
        [MaxBadConfigurations > 0]
    }
    [Type = BadConfigurationBased]
}

ImprovementBasedSC : StopCondition 1..5{
    Parameters {
        MaxConfigsWithoutImprovement -> integer
        [MaxConfigsWithoutImprovement > 0]
    }
    [Type = ImprovementBased]
}

TimeBasedSC : StopCondition 1..5{
    Parameters {
        MaxRunTime -> integer
        TimeUnit -> string
        [MaxRunTime > 0]
    }
    [Type = TimeBased]
}
