General {
    NumberOfWorkers -> integer
    result_storage -> string
    [NumberOfWorkers >= 1]
}

SelectionAlgorithm {
    type -> string
    [type in {Sobol, MersenneTwister}]
}

DefaultConfigurationHandler {
    type -> string
    [type in {AutoModel, Random}]
}

DomainDescription {
    DataFile -> string
}


abstract OutliersDetector 5 {
    MinActiveNumberOfTasks -> integer
    MaxActiveNumberOfTasks -> integer
    [MinActiveNumberOfTasks >= 3]
    [MaxActiveNumberOfTasks >= 3]
    [MinActiveNumberOfTasks <= MaxActiveNumberOfTasks]
}

or OutliersDetection {
    Dixon : OutliersDetector
    Grubbs : OutliersDetector
    Chauvenet : OutliersDetector
    Quartiles : OutliersDetector
    Mad : OutliersDetector
}

abstract AbstrRepeater {
    MinTasksPerConfiguration -> integer
    MaxTasksPerConfiguration -> integer
    [MinTasksPerConfiguration <= MaxTasksPerConfiguration]
}

RepetitionManagement {
    DefaultConfiguration {
        TasksPerConfiguration -> integer
        [TasksPerConfiguration >= 10]
    }
    Repeaters{
        xor Repeater {
            QuantityBased : AbstrRepeater {
                [MinTasksPerConfiguration >= 1]
            }
            AcceptableErrorBased: AbstrRepeater {
                MaxFailedTasksPerConfiguration -> integer
                BaseAcceptableErrors -> integer
                ConfidenceLevels -> float
                DevicesScaleAccuracies -> integer
                DevicesAccuracyClasses -> integer
                [MinTasksPerConfiguration >= 2]
                
                ExperimentAwareness {
                    isEnabled -> boolean
                    MaxAcceptableErrors -> integer
                    RatiosMax -> integer
                    MinTasksPerUnderperformingConfiguration -> integer
                    [MinTasksPerUnderperformingConfiguration >= 1]
                }
            }
        }
    }
}

abstract Model {
    Type -> predefined
}

abstract TreeParzenEstimator: Model {
    Parameters {
        TopNPercent -> integer
        RandomFraction -> integer
        BandwidthFactor -> integer
        MinBandwirth -> float
        SamplingSize -> integer
    }
    [Type = 'brise.TreeParzenEstimator']
}

abstract MultiArmedBandit: Model {
    Parameters {
        cType -> string
        c -> float
        [cType in {int, float, std}]
        [if cType == float then 0 <= c]
        [if cType == float then c <= 1]
        [if cType == std then c = std]
    }
    [Type = 'brise.MultiArmedBandit']
}

abstract ModelMock

abstract SciKitLearn {
    Type -> string
    Parameters {
        SamplingSize -> integer
        MinimalScore -> float
        CrossValidationSplits -> integer
        TestSize -> float
        DataPreprocessing {
            OrdinalHyperparameter -> string
            NominalHyperparameter -> string
            IntegerHyperparameter -> string
            FloatHyperparameter -> string
        }
        UnderlyingModelParameters {
            n_iter -> integer
            tol -> float
            normalize -> boolean
        }
    }
}

Predictor {
    WindowSize -> float
    Models {
        xor Model {
            TPE : TreeParzenEstimator
            MAB : MultiArmedBandit
            MM : ModelMock
            skLearn : SciKitLearn
        }
    }
}

StopConditionTriggerLogic {
    Expression -> string
    InspectionParameters {
        RepetitionPeriod -> integer
        TimeUnit -> string
        [RepetitionPeriod > 0]
        [TimeUnit in {seconds, minutes, hours, days}]
    }
}

abstract SC {
    Name -> string
    Type -> predefined
}

StopCondition {
    QuantityBasedSC : SC + {
        Parameters {
            MaxConfigs -> integer
            [MaxConfigs > 0]
        }
        [Type = QuantityBased]
    }

    GuaranteedSC : SC 1 {
        [Type = Guaranted]
    }

    BadConfigurationBasedSC : SC + {
        Parameters {
            MaxBadConfigurations -> integer
            [MaxBadConfigurations > 0]
        }
        [Type = BadConfigurationBased]
    }

    ImprovementBasedSC : SC + {
        Parameters {
            MaxConfigsWithoutImprovement -> integer
            [MaxConfigsWithoutImprovement > 0]
        }
        [Type = ImprovementBased]
    }

    TimeBasedSC : SC + {
        Parameters {
            MaxRunTime -> integer
            TimeUnit -> string
            [MaxRunTime > 0]
            [TimeUnit in {seconds, minutes, hours, days}]
        }
        [Type = TimeBased]
    }
}


TransferLearning ? {
    TransferExpediencyDetermination {
        ComparatorType -> string
        MinNumberOfSamples -> integer
        xor NumberOfSimilarExperiments {
            Numeric {
                Value -> integer
            }
            Categorical {
                Value -> predefined
                [Value = 'use_clustering']
            }
        }
        ClusteringAlgorithm -> predefined
        [ClusteringAlgorithm = MeanShiftClustering]
    }
    MultiTaskLearning ? {
        Standard{
            Filters{
                FewShot -> boolean
            }
            OldNewConfigsRatio -> float
            TransferBestConfigsOnly -> boolean
            TransferFromMostSimilarExperimentsFirst -> boolean
            [OldNewConfigsRatio >= 0.1]
        }      
    }
    ModelsRecommendation ? {
        DynamicModelsRecommendation {
            xor RecommendationGranularity {
                Finite {
                    Value -> integer
                    [Value >= 1]
                }
                Infinite {
                    Value -> predefined
                    [Value = 'inf']
                }
            }
            Filters {
                FewShot -> boolean
            }
            TimeToBuildModelThreshold -> float
            TimeUnit -> string
            ThresholdType -> string
            PerformanceMetric -> string
            [TimeUnit in {seconds, minutes, hours, days}]
            [ThresholdType in {hard, soft}]
            [PerformanceMetric in {AverageRelativeImprovement}] 
        }
    }
}

abstract NominalHyperparameter {
    Type -> predefined
    [Type = NominalHyperparameter]
}

abstract MDNominalHyperparameter {
    Type -> predefined
    Model -> string
    [Type = NominalHyperparameter]
    // [Model in childs.Predictor.Models]
}

abstract OrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> string
    Model -> predefined
    [Type = OrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract IntegerOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> integer
    Model -> predefined
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract FloatOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> float
    Model -> predefined
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
    // [Model in childs.Predictor.Models]
}

abstract FloatHyperparameter {
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> float
    Model -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
    // [Model in childs.Predictor.Models]
}

abstract IntegerHyperparameter {
    Name -> predefined
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> integer
    Model -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
    // [Model in childs.Predictor.Models]
}

Context {
    Experiment {
        TaskConfiguration {
            TaskName -> string
            xor Scenario {
                FromFile {
                    WsFile -> string
                    AdditionalParameter * {
                        Name -> string
                        Value -> string
                    }
                }
                FromDescription {
                    Problem -> string
                    InitializationParameters -> string
                    Budget {
                        Type -> string
                        Amount -> integer
                    }
                    Hyperparameters -> string
                }
            }
            Objectives{
                Objective + {
                    Name -> string
                    DataType -> string
                    Minimization -> boolean
                    Priority -> integer
                    ModelPriority -> integer
                    ExpectedValuesRange -> floatArray
                    MaxTimeToRunTask -> integer ?
                }
            }
            [fcard.RepetitionManagement.Repeaters.Repeater = fcard.Context.Experiment.TaskConfiguration.Objectives.Objective]
        }

        Experiment : NominalHyperparameter {
            Energy: NominalHyperparameter {
                Frequency: FloatOrdinalHyperparameter{
                    [Categories = {1200.0, 1300.0, 1400.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2200.0, 2300.0, 2400.0, 2500.0, 2700.0, 2800.0, 2900.0, 2901.0}]
                }
                Threads: IntegerOrdinalHyperparameter{
                    [Categories = {1, 2, 4, 8, 16, 32}]
                }
            }
        }

    }
    Model {
        xor Structure {
           Flat
           Hierarchical
        }
        ModelStructure -> predefined
        [if gcard.Context.Model.Structure == Flat then fcard.Predictor.Models.Model = 1 else fcard.Predictor.Models.Model = 2]
        [ModelStructure = gcard.Context.Model.Structure]
    }
}
