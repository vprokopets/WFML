
abstract Hyperparameter {
    Type -> predefined
    Region -> predefined
    [Region = TopLevel]
    [if parent.self.Type == Category then Region = parent.self else Region = parent.self.Region]
}

abstract NominalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> predefined
    [Type = NominalHyperparameter]
    [Categories = (filter childs.self where Type == Category)]
    [Default in Categories]
}

abstract Category {
    Type -> predefined
    Region -> predefined
    [Type = Category]
    [Region = parent.self.Region]
}

abstract OrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> predefined
    [Type = OrdinalHyperparameter]
    [Default in Categories]
}


abstract FloatHyperparameter: Hyperparameter {
    Lower -> predefined
    Upper -> predefined
    Default -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
}

abstract FloatOrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> predefined
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
}

abstract IntegerHyperparameter: Hyperparameter {
    Lower -> predefined
    Upper -> predefined
    Default -> predefined
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
}

abstract IntegerOrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> predefined
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
}


EnergySO {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    frequency: FloatOrdinalHyperparameter{
        [Categories = {1200.0, 1300.0, 1400.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2200.0, 2300.0, 2400.0, 2500.0, 2700.0, 2800.0, 2900.0, 2901.0}]
        [Default = 1200.0]
    }
    threads: IntegerOrdinalHyperparameter{
        [Categories = {1, 2, 4, 8, 16, 32}]
        [Default = 1]
    }
}

Energy512 {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    frequency: FloatOrdinalHyperparameter{
        [Categories = {1200.0, 1300.0, 1400.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0, 2200.0, 2300.0, 2400.0, 2500.0, 2700.0, 2800.0, 2900.0, 2901.0}]
        [Default = 1200.0]
    }
    threads: IntegerHyperparameter{
        [Lower = 1]
        [Upper = 32]
        [Default = 1]
    }
}

EnergyMO {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    FreqType: NominalHyperparameter {
        High: Category {
            frequency: FloatOrdinalHyperparameter{
                [Categories = {2200.0, 2300.0, 2400.0, 2500.0, 2700.0, 2800.0, 2900.0, 2901.0}]
                [Default = 2200.0]
            }
            threads: IntegerOrdinalHyperparameter{
                [Categories = {1, 2, 4, 8, 16, 32}]
                [Default = 1]
            }
        }
        Low: Category {
            frequency: FloatOrdinalHyperparameter{
                [Categories = {1200.0, 1300.0, 1400.0, 1600.0, 1700.0, 1800.0, 1900.0, 2000.0}]
                [Default = 1200.0]
            }
            threads: IntegerOrdinalHyperparameter{
                [Categories = {1, 2, 4, 8, 16, 32}]
                [Default = 1]
            }
        }
        [Default = 'Low']
    }
}

HH {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy_SimulatedAnnealing: Category {
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        jMetalPy_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        jMetal_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_probability: FloatHyperparameter {
                [Lower = 0]
                [Upper = 1]
                [Default = 0.5]
            }
        }
        [Default = 'jMetalPy_SimulatedAnnealing']
    }
}

GA {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    generations: IntegerHyperparameter {
        [Lower = 25000]
        [Upper = 200000]
        [Default = 200000]
    }
    populationSize: IntegerHyperparameter {
        [Lower = 100]
        [Upper = 50000]
        [Default = 1000]
    }
    treeMutateOperatorP: FloatHyperparameter {
        [Lower = 0.1]
        [Upper = 1.0]
        [Default = 0.9]
    }
    treeMutateOperatorP1: FloatHyperparameter {
        [Lower = 0.1]
        [Upper = 1.0]
        [Default = 0.7]
    }
    treeMutateOperatorP2: FloatHyperparameter {
        [Lower = 0.1]
        [Upper = 1.0]
        [Default = 0.3]
    }
    treeMutateOperatorP3: FloatHyperparameter {
        [Lower = 0.1]
        [Upper = 1.0]
        [Default = 0.4]
    }
    lambda_: IntegerOrdinalHyperparameter {
        [Categories = {25}]
        [Default = 25]
    }
    crossoverRate: FloatOrdinalHyperparameter {
        [Categories = {0.95}]
        [Default = 0.95]
    }
    mu: IntegerOrdinalHyperparameter {
        [Categories = {25}]
        [Default = 25]
    }
    tournament: IntegerOrdinalHyperparameter {
        [Categories = {0}]
        [Default = 0]
    }
}
                    
HHSynth {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy_SimulatedAnnealing: Category {
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                UniformMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                NonUniformMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        jMetalPy_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                UniformMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                NonUniformMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        jMetal_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_probability: FloatHyperparameter {
                [Lower = 0]
                [Upper = 1]
                [Default = 0.5]
            }
        }
        [Default = 'jMetalPy_SimulatedAnnealing']
    }
}

MHjMetalES {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetal_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_probability: FloatHyperparameter {
                [Lower = 0]
                [Upper = 1]
                [Default = 0.5]
            }
        }
        [Default = 'jMetal_EvolutionStrategy']
    }
}

MHjMetalPyES {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy_EvolutionStrategy: Category {
            mu: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            lambda_: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 500]
            }
            elitist: OrdinalHyperparameter {
                [Categories = {true, false}]
                [Default = 'false']
            }
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        [Default = 'jMetalPy_EvolutionStrategy']
    }
}

MHjMetalPySA {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy_SimulatedAnnealing: Category {
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
        }
        [Default = 'jMetalPy_SimulatedAnnealing']
    }
}

MHjMetalPyGA {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy_GeneticAlgorithm: Category {
            population_size: IntegerHyperparameter {
                [Lower = 10]
                [Upper = 1000]
                [Default = 100]
            }
            offspring_population_size: IntegerHyperparameter {
                [Lower = 10]
                [Upper = 1000]
                [Default = 100]
            }
            mutation_type: NominalHyperparameter {
                PermutationSwapMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                ScrambleMutation: Category {
                    mutation_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PermutationSwapMutation']
            }
            crossover_type: NominalHyperparameter {
                PMXCrossover: Category {
                    crossover_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                CXCrossover: Category {
                    crossover_probability: FloatHyperparameter {
                        [Lower = 0]
                        [Upper = 1]
                        [Default = 0.5]
                    }
                }
                [Default = 'PMXCrossover']
            }
            selection_type: OrdinalHyperparameter {
                [Categories = {RouletteWheelSelection, BestSolutionSelection, BinaryTournamentSelection}]
                [Default = 'BinaryTournamentSelection']
            }
        }
        [Default = 'jMetalPy_GeneticAlgorithm']
    }
}

NB {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    laplace_correction: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    estimation_mode: NominalHyperparameter {
        full: Category {
            bandwidth_selection: OrdinalHyperparameter {
                [Categories = {heuristic, fix}]
                [Default = 'heuristic']
            }
        }
        greedy: Category {
            minimum_bandwidth: FloatHyperparameter {
                [Lower = 0.001]
                [Upper = 1000]
                [Default = 0.5]
            }
            number_of_kernels: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 1000]
                [Default = 1]
            }
        }
        [Default = 'greedy']
    }
    bandwidth: FloatHyperparameter {
        [Lower = 0.001]
        [Upper = 1000]
        [Default = 10.0]
    }
    use_application_grid: OrdinalHyperparameter {
        application_grid_size: IntegerHyperparameter {
            [Lower = 10]
            [Upper = 1000]
            [Default = 100]
        }
        [Categories = {true, false}]
        [Default = 'false']
    }
}

NN {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    layer: IntegerHyperparameter {
        [Lower = 2]
        [Upper = 8]
        [Default = 2]
    }
    training_cycles: IntegerHyperparameter {
        [Lower = 200]
        [Upper = 1000]
        [Default = 200]
    }
    learning_rate: FloatHyperparameter {
        [Lower = 0.01]
        [Upper = 1]
        [Default = 0.01]
    }
    momentum: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1]
        [Default = 0.9]
    }
    decay: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
    shuffle: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    normalize: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    error_epsilon: FloatHyperparameter {
        [Lower = 0.000001]
        [Upper = 0.0001]
        [Default = 0.0001] 
    }
    use_local_random_seed: NominalHyperparameter {
        true: Category {
            local_random_seed: IntegerHyperparameter {
                [Lower = 1992]
                [Upper = 1994]
                [Default = 1992]
            }
        }
        false: Category
        [Default = 'false']
    }
}

RF {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    number_of_trees: IntegerHyperparameter {
        [Lower = 2]
        [Upper = 500]
        [Default = 500]
    }
    criterion: OrdinalHyperparameter {
        [Categories = {gain_ratio, accuracy, information_gain}]
        [Default = 'accuracy']
    }
    maximal_depth: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 100]
        [Default = 10]
    }
    apply_pruning: NominalHyperparameter {
        true: Category {
            confidence: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1.0]
                [Default = 0.25]
            }
        }
        false: Category
        [Default = 'true']
    }
    apply_prepruning: NominalHyperparameter {
        true: Category {
            minimal_gain: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 10.0]
                [Default = 0.1]
            }
            minimal_leaf_size: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 500]
                [Default = 500]
            }
            minimal_size_for_split: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 10]
                [Default = 4]
            }
            number_of_prepruning_alternatives: IntegerHyperparameter {
                [Lower = 1]
                [Upper = 4]
                [Default = 3]
            }
        }
        false: Category
        [Default = 'true']
    }
    random_splits: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
    guess_subset_ratio: NominalHyperparameter {
        true: Category {
            subset_ratio: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1.0]
                [Default = 0.3]
            }
        }
        false: Category
        [Default = 'true']
    }
    voting_strategy: OrdinalHyperparameter {
        [Categories = {confidence_vote, majority_vote}]
        [Default = 'confidence_vote']
    }
    use_local_random_seed: NominalHyperparameter {
        true: Category {
            local_random_seed: IntegerHyperparameter {
                [Lower = 1992]
                [Upper = 1994]
                [Default = 1992]
            }
        }
        false: Category
        [Default = 'false']
    }
    enable_parallel_execution: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
}

SVM {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    kernel_type: NominalHyperparameter {
        dot: Category
        annova: Category {
            kernel_gamma: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
            kernel_degree: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 2.0]
            }
        }
        epachnenikov: Category {
            kernel_sigma1: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
            kernel_degree: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 2.0]
            }
        }
        gaussian_combination: Category {
            kernel_sigma1: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
            kernel_sigma2: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 0.0]
            }
            kernel_sigma3: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 2.0]
            }
        }
        multiquadric: Category {
            kernel_sigma1: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
            kernel_shift: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
        }
        neural: Category {
            kernel_a: FloatHyperparameter {
                [Lower = -1000.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
            kernel_b: FloatHyperparameter {
                [Lower = -1000.0]
                [Upper = 1000.0]
                [Default = 0.0]
            }
        }
        polynomial: Category {
            kernel_degree: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 2.0]
            }
        }
        radial: Category {
            kernel_gamma: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1000.0]
                [Default = 1.0]
            }
        }
        [Default = 'dot']
    }
    kernel_cache: IntegerHyperparameter {
        [Lower = 0]
        [Upper = 1000]
        [Default = 200]
    }
    C: FloatHyperparameter {
        [Lower = -1.0]
        [Upper = 1000.0]
        [Default = 0.0]
    }
    convergence_epsilon: FloatHyperparameter {
        [Lower = 0.001]
        [Upper = 0.1]
        [Default = 0.001]
    }
    max_iterations: IntegerHyperparameter {
        [Lower = 100]
        [Upper = 100000]
        [Default = 100000]
    }
    scale: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    calculate_weights: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    return_optimization_performance: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'true']
    }
    L_pos: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1000]
        [Default = 1.0]
    }
    L_neg: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1000]
        [Default = 1.0]
    }
    epsilon: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1000]
        [Default = 0.0]
    }
    epsilon_plus: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1000]
        [Default = 0.0]
    }
    epsilon_minus: FloatHyperparameter {
        [Lower = 0.0]
        [Upper = 1000]
        [Default = 0.0]
    }
    balance_cost: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
    quadratic_loss_pos: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
    quadratic_loss_neg: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
    estimate_performance: OrdinalHyperparameter {
        [Categories = {true, false}]
        [Default = 'false']
    }
}

OpenML {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    criterion: NominalHyperparameter {
        gini: Category {
            max_depth: IntegerHyperparameter {
                [Lower = 10]
                [Upper = 120]
                [Default = 50]
            }
            max_features: OrdinalHyperparameter {
                [Categories = {sqrt, log2}]
                [Default = 'sqrt']
            }
            min_samples_leaf: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 0.5]
                [Default = 0.1]
            }
            min_samples_split: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1.0]
                [Default = 0.1]
            }
            n_estimators: IntegerHyperparameter {
                [Lower = 100]
                [Upper = 1000]
                [Default = 100]
            }
        }
        entropy: Category {
            max_depth: IntegerHyperparameter {
                [Lower = 10]
                [Upper = 120]
                [Default = 50]
            }
            max_features: OrdinalHyperparameter {
                [Categories = {sqrt, log2}]
                [Default = 'sqrt']
            }
            min_samples_leaf: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 0.5]
                [Default = 0.1]
            }
            min_samples_split: FloatHyperparameter {
                [Lower = 0.0]
                [Upper = 1.0]
                [Default = 0.1]
            }
            n_estimators: IntegerHyperparameter {
                [Lower = 100]
                [Upper = 1000]
                [Default = 100]
            }
        }
        [Default = 'gini']
    }
}

SA {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    subComponentUnassignedFactor: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 10000]
        [Default = 1]
    }
    softwareComponentUnassignedFactor: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 10000]
        [Default = 5]
    }
    hardScoreStartingTemperaturePercentage: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 100]
        [Default = 100]
    }
    softScoreStartingTemperaturePercentage: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 100]
        [Default = 100]
    }
    acceptedCountLimit: IntegerHyperparameter {
        [Lower = 1]
        [Upper = 50]
        [Default = 50]
    }
    millisecondsSpentLimit: IntegerOrdinalHyperparameter {
        [Categories = {10000}]
        [Default = 10000]
    }
    unimprovedMillisecondsSpentLimit: IntegerOrdinalHyperparameter {
        [Categories = {10000}]
        [Default = 10000]
    }  
}

AH {
    Type -> predefined
    Region -> predefined
    [Type = 'SearchSpace']
    [Region = TopLevel]

    x: FloatHyperparameter {
        [Lower = -4.0]
        [Upper = 5.0]
        [Default = 1.0]
    }
    y: FloatHyperparameter {
        [Lower = -4.0]
        [Upper = 5.0]
        [Default = 1.0]
    }
}