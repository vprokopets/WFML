abstract Model {
    Type -> predefined
    Region -> string
    Preprocessing {
        isEnabled -> boolean
        Algorithms -> array
        [if isEnabled == True then (all Algorithms in childs.Preprocessing) else (Algorithms == None)]
    }
    [Region in Context.ExperimentRegions.Regions]
}

abstract LinearRegression: Model {
    [Type = 'skLearn.LinearRegression']
}

abstract RANSACRegressor: Model {
    [Type = 'skLearn.RANSACRegressor']
}

abstract SupportVectorRegression: Model {
    Kernel -> string
    C -> float
    GammaType -> string
    Gamma -> float
    Epsilon -> float
    [Kernel in {linear, poly, rbf, sigmoid, precomputed}]
    [GammaType in {scale, auto, float}]
    [if GammaType == scale then Gamma == scale]
    [if GammaType == auto then Gamma == auto]
    [if GammaType == float then Gamma > 0]
    [C > 0]
    [Epsilon > 0]
    [Type = 'sklearn.SVR']
}

abstract GaussianProcessRegression: Model {
    Kernel -> string
    NRestarts -> integer
    [Kernel in {KERNEL_MAUNA, KERNEL_SIMPLE, KERNEL_GPML}]
    [NRestarts > 0]
    [Type = 'sklearn.GPR']
}
abstract ModelMock: Model {
    [Type = 'brise.ModelMock']
}

abstract ModelsUnion: Model {
    Parameters {
        Models -> array
        SplitY -> boolean
        [all Models in childs.Predictor.Models]
    }
    [Type = 'brise.ModelsUnion']
}

Predictor {
    WindowSize -> float
    Models {
        xor Model {
            LinReg : LinearRegression
            RANSAC : RANSACRegressor
            SVR: SupportVectorRegression
            GPR: GaussianProcessRegression
            MM : ModelMock
            MU: ModelsUnion
        }
    }
    Optimizer -> predefined
    Validator -> predefined
    [if Context.Model.Structure == Flat then Optimizer = RandomSearch else Optimizer = MOEA]
    [Validator = CrossValidation]
    [size childs.Predictor.Models == size unique Region at Predictor]
}

Context {
    Model {
        Structure -> string
        [Structure in {Flat, Hierarchical}]
        [if Context.Model.Structure == Flat then fcard.Predictor.Models.Model = 1 else fcard.Predictor.Models.Model = 3]
    }
}