

abstract Model {
    Type -> predefined
}

abstract TreeParzenEstimator: Model {
    Parameters {
        TopNPercent -> integer
        RandomFraction -> integer
        BandwidthFactor -> integer
        MinBandwirth -> float
        SamplingSize -> integer
    }
    [Type = 'brise.TreeParzenEstimator']
}

abstract MultiArmedBandit: Model {
    Parameters {
        cType -> string
        c -> float
        [cType in {int, float, std}]
        [if cType == float then 0 <= c]
        [if cType == float then c <= 1]
        [if cType == std then c = std]
    }
    [Type = 'brise.MultiArmedBandit']
}

abstract ModelMock

abstract SciKitLearn {
    Type -> string
    Parameters {
        SamplingSize -> integer
        MinimalScore -> float
        CrossValidationSplits -> integer
        TestSize -> float
        DataPreprocessing {
            OrdinalHyperparameter -> string
            NominalHyperparameter -> string
            IntegerHyperparameter -> string
            FloatHyperparameter -> string
        }
        UnderlyingModelParameters {
            n_iter -> integer
            tol -> float
            normalize -> boolean
        }
    }
}

Predictor {
    WindowSize -> float
    Models {
        xor Model {
            TPE : TreeParzenEstimator
            MAB : MultiArmedBandit
            MM : ModelMock
            skLearn : SciKitLearn
        }
    }
}


abstract Hyperparameter {
    Type -> predefined
    Region -> predefined
    [Region = TopLevel]
    [if parent.self.Type == Category then Region = parent.self else Region = parent.self.Region]
    [if Context.Model.Structure == Flat then Region = TopLevel]
}

abstract NominalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> string
    [Type = NominalHyperparameter]
    [Categories = childs.self]
    [Default in Categories]
}

abstract Category {
    Type -> predefined
    Region -> predefined
    [Type = Category]
    [Region = parent.self.Region]
}

abstract OrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> string
    [Type = OrdinalHyperparameter]
    [Default in Categories]
}


abstract FloatHyperparameter: Hyperparameter {
    Lower -> float
    Upper -> float
    Default -> float
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
}

abstract FloatOrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> float
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
}

abstract IntegerHyperparameter: Hyperparameter {
    Lower -> integer
    Upper -> integer
    Default -> integer
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
}

abstract IntegerOrdinalHyperparameter: Hyperparameter {
    Categories -> predefined
    Default -> integer
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
}

Context {
    Experiment {
        Title -> string
        SearchSpace {
            Type -> predefined
            Region -> predefined
            [Region = TopLevel]
            LowLevelHeuristic: NominalHyperparameter {
                SimulatedAnnealing: Category {
                    MutationType: NominalHyperparameter {
                        PermutationSwapMutation: Category {
                            MutationProbability: FloatHyperparameter
                        }
                        ScrambleMutation: Category {
                            MutationProbability: FloatHyperparameter
                        }
                    }
                }
            }
        }
    }
    ExperimentRegions{
        Regions -> predefined
        [Regions = unique Region at Context]
    }
    Model {
        Structure -> string
        [Structure in {Flat, Hierarchical}]
        [if Context.Model.Structure == Flat then fcard.Predictor.Models.Model = 1 else fcard.Predictor.Models.Model = size Context.ExperimentRegions.Regions]
    }
}
