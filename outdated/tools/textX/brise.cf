General {
    NumberOfWorkers -> integer
    result_storage -> string
    [NumberOfWorkers = 3]
    [result_storage = './Results/']
}

SelectionAlgorithm -> string
[SelectionAlgorithm = 'MersenneTwister']

abstract OutliersDetection {
    isEnabled -> boolean
    MinActiveNumberOfTasks -> integer
    MaxActiveNumberOfTasks -> integer
}

DixonOD : OutliersDetection {
    [isEnabled = true]
    [MinActiveNumberOfTasks = 3]
    [MaxActiveNumberOfTasks = 10000]
}

GrubbsOD : OutliersDetection {
    [isEnabled = true]
    [MinActiveNumberOfTasks = 3]
    [MaxActiveNumberOfTasks = 10000]
}

ChauvenetOD : OutliersDetection {
    [isEnabled = true]
    [MinActiveNumberOfTasks = 3]
    [MaxActiveNumberOfTasks = 10000]
}

QuartilesOD : OutliersDetection {
    [isEnabled = true]
    [MinActiveNumberOfTasks = 3]
    [MaxActiveNumberOfTasks = 10000]
}

MadOD : OutliersDetection {
    [isEnabled = true]
    [MinActiveNumberOfTasks = 3]
    [MaxActiveNumberOfTasks = 10000]
}


abstract Repeater {
    MinTasksPerConfiguration -> integer
    MaxTasksPerConfiguration -> integer
}

DefaultRepeater : Repeater {
    [MinTasksPerConfiguration = 10]
    [MaxTasksPerConfiguration = 10]
}

AcceptableErrorBasedRepeater: Repeater {
    [MinTasksPerConfiguration = 2]
    [MaxTasksPerConfiguration = 10]
    MaxFailedTasksPerConfiguration -> integer
    [MaxFailedTasksPerConfiguration = 5]
    BaseAcceptableErrors -> integer
    [BaseAcceptableErrors = 5]
    ConfidenceLevels -> integer
    [ConfidenceLevels = 0.95]
    DevicesScaleAccuracies -> integer
    [DevicesScaleAccuracies = 10]
    DevicesAccuracyClasses -> integer
    [DevicesAccuracyClasses = 10]
    ExperimentAwareness {
        isEnabled -> boolean
        [isEnabled = true]
        MaxAcceptableErrors -> integer
        [MaxAcceptableErrors = 50]
        RatiosMax -> integer
        [RatiosMax = 10]
    }
}

StopConditionTriggerLogic {
    Expression -> string
    [Expression = '(QuantityBased and Guaranteed and ImprovementBased) or BadConfigurationBased or TimeBased']
    InspectionParameters {
        RepetitionPerion -> integer
        TimeUnit -> string
        [RepetitionPerion = 1]
        [TimeUnit = seconds]
    }
}

abstract StopCondition {
    Name -> string
    Type -> string
}

QuantityBasedSC : StopCondition {
    [Name = QuantityBased]
    [Type = QuantityBased]
    Parameters {
        MaxConfigs -> integer
        [MaxConfigs = 15]
    }
}

GuaranteedSC : StopCondition {
    [Name = Guaranteed]
    [Type = Guaranteed]
}

BadConfigurationBasedSC : StopCondition {
    [Name = 'BadConfigurationBased']
    [Type = 'BadConfigurationBased']
    Parameters {
        MaxBadConfigurations -> integer
        [MaxBadConfigurations = 10]
    }
}

ImprovementBasedSC : StopCondition {
    [Name = 'ImprovementBased']
    [Type = 'ImprovementBased']
    Parameters {
        MaxConfigsWithoutImprovement -> integer
        [MaxConfigsWithoutImprovement = 5]
    }
}

TimeBasedSC : StopCondition {
    [Name = 'TimeBased']
    [Type = 'TimeBased']
    Parameters {
        MaxRunTime -> integer
        TimeUnit -> string
        [MaxRunTime = 10]
        [TimeUnit = minutes]
    }
}


abstract StopCondition{
    threshold -> integer
}

DefaultStopCondition : StopCondition

NewStopCondition{
    threshold -> integer
    [threshold = 10]
}

RequiredClafer
[NewStopCondition requires RequiredClafer]



abstract NominalHyperparameter {
    Type -> predefined
    [Type = NominalHyperparameter]
}

abstract OrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> string
    [Type = OrdinalHyperparameter]
    [Default in Categories]
}

abstract IntegerOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> integer
    [Type = IntegerOrdinalHyperparameter]
    [Default in Categories]
}

abstract FloatOrdinalHyperparameter {
    Type -> predefined
    Categories -> predefined
    Default -> float
    [Type = FloatOrdinalHyperparameter]
    [Default in Categories]
}

abstract FloatHyperparameter {
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> float
    [Default >= Lower]
    [Default <= Upper]
    [Type = FloatHyperparameter]
}

abstract IntegerHyperparameter {
    Name -> predefined
    Type -> predefined
    Lower -> predefined
    Upper -> predefined
    Default -> integer
    [Default >= Lower]
    [Default <= Upper]
    [Type = IntegerHyperparameter]
}


Experiment : NominalHyperparameter {
    LowLevelHeuristic: NominalHyperparameter {
        jMetalPy {
            SimulatedAnnealing: NominalHyperparameter {
                MutationType: OrdinalHyperparameter{
                    MutationProbability: FloatHyperparameter{
                        [Lower = 0]
                        [Upper = 1]
                    }
                    [Categories = {PermutationSwapMutation, ScrambleMutation}]
                }
            }
            EvolutionStrategy: NominalHyperparameter {
                mu: IntegerHyperparameter {
                    [Lower = 1]
                    [Upper = 1000]
                }
                lambda_ : IntegerHyperparameter{
                    [Lower = 1]
                    [Upper = 1000]
                }
                elitist: OrdinalHyperparameter{
                    [Categories = {True, False}]
                }
                MutationType: OrdinalHyperparameter{
                    MutationProbability: FloatHyperparameter{
                        [Lower = 0]
                        [Upper = 1]
                    }
                    [Categories = {PermutationSwapMutation, ScrambleMutation}]
                }
            }
        }
        jMetal {
            EvolutionStrategy: NominalHyperparameter {
                mu: IntegerHyperparameter {
                    [Lower = 1]
                    [Upper = 1000]
                }
                lambda_ : IntegerHyperparameter{
                    [Lower = 1]
                    [Upper = 1000]
                }
                elitist: OrdinalHyperparameter{
                    [Categories = {True, False}]
                }
                MutationType: OrdinalHyperparameter{
                    MutationProbability: FloatHyperparameter{
                        [Lower = 0]
                        [Upper = 1]
                    }
                    [Categories = {PermutationSwapMutation, ScrambleMutation}]
                }
            }
        }
    }
}